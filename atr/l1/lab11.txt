.model small
.186
.stack 100h

.data
    FileName                db    "overflow.txt", 0
    D                       db    "A = 0000 B = 0000 C = 0000", 0Dh, 0Ah
    result                  db    "Error, division by zero"
    A                       db    ?
    B                       db    ?
    C                       db    ?
    FileNumber              dw    ?
    
   
.code
Start:
        mov     ax, @data
        mov     ds, ax 
        
        mov     bx, word ptr A
        mov     dl, C
        mov     cx, bx
        or      cx, dx
        jz      create_file
        
        jmp SHORT program_second  
        
create_file:        
        mov     ah, 03Ch
        mov     cx, 0
        mov     dx, offset FileName
        int     21h
        
        mov     [FileNumber], ax
        
        mov     si, -128    ; si = A
        mov     di, -128    ; di = B
        mov     bp, -128    ; bp = C
        mov     cx, 0000h
    
program:
        mov     ax, si      
        mov     bx, si      
        shl     bx, 2      
        add     bx, ax      
        add     bx, ax      
        imul    bx         
        add     ax, 8       
        adc     dx, 0       

        cmp     bp, 0
        jge     sub_C
        neg     bp
        add     ax, bp
        adc     dx, 0
        neg     bp
        cmp     dx, 0
        jne     write_to_file_first
        cmp     ah, 80h
        jae     write_to_file_first
        jmp SHORT jumping
sub_C:
        sub     ax, bp
        sbb     dx, 0
        jnz     write_to_file_second
        cmp     ah, 80h
        jae     write_to_file_second
        jmp SHORT jumping
        
write_to_file_first:
        jmp     write_to_file
        
program_second:
        mov     al, bl      
        imul    al          
        mov     di, ax     
        mov     bp, ax     
        shl     bp, 2      
        add     bp, ax      
        add     bp, ax     
        add     bp, 8       
        mov     al, dl      
        cbw                 
        sub     bp, ax      
        jz      ending
        
        mov     al, bl      
        cbw                
        shl     ax, 2       
        mov     si, ax     
        shl     ax, 1      
        add     si, ax     
        inc     si        
        
        mov     al, bh     
        imul    dl        
        imul    si         

        sub     ax, di
        sbb     dx, 0      
        
        idiv    bp          
        mov     [result], ah
        mov     [result + 1], al
        jmp SHORT    ending

jumping:        
        cmp     si, 127    
        jl      inc_A
        
        cmp     di, 127
        jl      inc_B
        
        cmp     bp, 127
        jl      inc_C

        mov     bx, [FileNumber]
        mov     ah, 03Eh
        int     21h
ending:        
        mov     ah, 04ch
        int     21h

write_to_file_second:
        cmp     dx, 0FFFFh
        je      jumping    
        jmp SHORT write_to_file

inc_A:

        inc     si
        jmp     program    
        
inc_B:
        mov     si, -128
        inc     di
        mov     cl, 00h
        jmp     program    
        
inc_C:
        mov     si, -128
        mov     di, -128
        mov     cl, 00h
        mov     ch, 00h
        inc     bp
        jmp     program    
        
write_to_file:
        mov     ax, si
        mov     [D + 4], '+'
        cmp     ax, 0
        jge     not_minus_A
        neg     al
        mov     [D + 4], '-'
not_minus_A:
        aam
        or      al, 30h
        mov     [D + 7], al
        mov     al, ah
        aam
        or      al, 30h
        mov     [D + 6], al
        or      ah, 30h
        mov     [D + 5], ah
        
        cmp     cl, 1
        je      writing
        mov     ax, di
        mov     [D + 13], '+'
        cmp     al, 0
        jge     not_minus_B
        neg     al
        mov     [D + 13], '-'
not_minus_B:
        aam
        or      al, 30h
        mov     [D + 16], al
        mov     al, ah
        aam    
        or      al, 30h
        mov     [D + 15], al
        or      ah, 30h
        mov     [D + 14], ah
        
        cmp     ch, 1
        je      writing
        mov     ax, bp
        mov     [D + 22], '+'
        cmp     ax, 0
        jge     not_minus_C
        neg     al
        mov     [D + 22], '-'
not_minus_C:
        aam
        or      al, 30h
        mov     [D + 25], al
        mov     al, ah
        aam
        or      al, 30h
        mov     [D + 24], al
        or      ah, 30h
        mov     [D + 23], ah       
        
writing:        
        mov     ah, 40h
        mov     bx, [FileNumber]
        mov     cx, 28
        mov     dx, offset D
        int     21h
        mov     cx, 0101h
        jmp     jumping
        
end Start       